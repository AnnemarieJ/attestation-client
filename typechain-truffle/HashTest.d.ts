/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface HashTestContract extends Truffle.Contract<HashTestInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<HashTestInstance>;
}

type AllEvents = never;

export interface HashTestInstance extends Truffle.ContractInstance {
  test(
    typ: number | BN | string,
    chainId: number | BN | string,
    blockNumber: number | BN | string,
    txId: string,
    utxo: number | BN | string,
    sourceAddress: string,
    destinationAddress: string,
    spent: number | BN | string,
    delivered: number | BN | string,
    hashToProve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyMerkleProof(
    txHash: string,
    sides: (number | BN | string)[],
    hashes: string[],
    targetHash: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    test(
      typ: number | BN | string,
      chainId: number | BN | string,
      blockNumber: number | BN | string,
      txId: string,
      utxo: number | BN | string,
      sourceAddress: string,
      destinationAddress: string,
      spent: number | BN | string,
      delivered: number | BN | string,
      hashToProve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyMerkleProof(
      txHash: string,
      sides: (number | BN | string)[],
      hashes: string[],
      targetHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
