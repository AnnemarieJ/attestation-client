/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StateConnectorContract
  extends Truffle.Contract<StateConnectorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StateConnectorInstance>;
}

export interface AttestationRequest {
  name: "AttestationRequest";
  args: {
    timestamp: BN;
    data: string;
    0: BN;
    1: string;
  };
}

export interface RoundFinalised {
  name: "RoundFinalised";
  args: {
    bufferNumber: BN;
    merkleHash: string;
    0: BN;
    1: string;
  };
}

type AllEvents = AttestationRequest | RoundFinalised;

export interface StateConnectorInstance extends Truffle.ContractInstance {
  BUFFER_TIMESTAMP_OFFSET(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  BUFFER_WINDOW(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  SIGNAL_COINBASE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  TOTAL_STORED_BUFFERS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  TOTAL_STORED_PROOFS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  buffers(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  finaliseRound: {
    (
      bufferNumber: number | BN | string,
      merkleHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      bufferNumber: number | BN | string,
      merkleHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      bufferNumber: number | BN | string,
      merkleHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bufferNumber: number | BN | string,
      merkleHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAttestation(
    bufferNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  merkleRoots(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  requestAttestations: {
    (data: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(data: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitAttestation: {
    (
      bufferNumber: number | BN | string,
      maskedMerkleHash: string,
      committedRandom: string,
      revealedRandom: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      bufferNumber: number | BN | string,
      maskedMerkleHash: string,
      committedRandom: string,
      revealedRandom: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      bufferNumber: number | BN | string,
      maskedMerkleHash: string,
      committedRandom: string,
      revealedRandom: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bufferNumber: number | BN | string,
      maskedMerkleHash: string,
      committedRandom: string,
      revealedRandom: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalBuffers(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    BUFFER_TIMESTAMP_OFFSET(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    BUFFER_WINDOW(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    SIGNAL_COINBASE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    TOTAL_STORED_BUFFERS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    TOTAL_STORED_PROOFS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    buffers(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    finaliseRound: {
      (
        bufferNumber: number | BN | string,
        merkleHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        bufferNumber: number | BN | string,
        merkleHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        bufferNumber: number | BN | string,
        merkleHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bufferNumber: number | BN | string,
        merkleHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAttestation(
      bufferNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    merkleRoots(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    requestAttestations: {
      (data: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(data: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    submitAttestation: {
      (
        bufferNumber: number | BN | string,
        maskedMerkleHash: string,
        committedRandom: string,
        revealedRandom: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        bufferNumber: number | BN | string,
        maskedMerkleHash: string,
        committedRandom: string,
        revealedRandom: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        bufferNumber: number | BN | string,
        maskedMerkleHash: string,
        committedRandom: string,
        revealedRandom: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bufferNumber: number | BN | string,
        maskedMerkleHash: string,
        committedRandom: string,
        revealedRandom: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    totalBuffers(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
